#core/utils.py
import random
from _ast import pattern
from typing import Optional

from core.models import client

def humanize_text(text: str) -> str:
	"""–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞"""
	# —à–∞–Ω—Å –æ–ø–µ—á–∞—Ç–∫–∏
	if random.random() < 0.01 and len(text) > 5:
		pos = random.randint(1, len(text) - 2)
		text = text[:pos] + text[pos + 1:] + text[pos] + text[pos + 2:]

	return text

def detect_style(user_message: str) -> str:
	"""–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
	romantic_words = ["‚ù§Ô∏è", "–ª—é–±–ª—é", "–º–∏–ª–∞—è", "–¥–æ—Ä–æ–≥–æ–π", "üòò"]
	funny_words = ["üòÇ", "—à—É—Ç–∫–∞", "–∞—Ö–∞—Ö", "–ª–æ–ª", "üòè"]
	cold_words = ["–æ–∫", "—É–≥—É", "–ª–∞–¥–Ω–æ", "—è—Å–Ω–æ"]

	msg = user_message.lower()

	if any(w in msg for w in romantic_words):
		return '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π, –∏–≥—Ä–∏—Å—Ç—ã–π, –∑–∞–∏–≥—Ä—ã–≤–∞—é—â–∏–π, —Å –Ω–æ—Ç–∫–∞–º–∏ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç–∏, –≤—ã–∑—ã–≤–∞—é—â–∏–π, –ø—Ä–æ–≤–æ—Ü–∏—Ä—É—é—â–∏–π'
	elif any(w in msg for w in funny_words):
		return '—à—É—Ç–æ—á–Ω—ã–π, –≤–µ—Å–µ–ª—ã–π, –∑–∞–±–∞–≤–Ω—ã–π, –º–∏–ª—ã–π'
	elif any(w in msg for w in cold_words):
		return '—Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —Ä–∞–º–∫–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ'
	else:
		return '–æ–±—ã—á–Ω—ã–π, –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥—è—â–∏–π –≤ —à—É—Ç–∫—É/—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –Ω–æ—Ç—É'

def extract_fact(text: str) -> Optional[str]:
	"""–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
	# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
	triggers = {
        "–∑–æ–≤—É—Ç": "–∏–º—è: {content}",
        "–º–Ω–µ –ª–µ—Ç": "–≤–æ–∑—Ä–∞—Å—Ç: {content}",
        "–∂–∏–≤—É –≤": "–≥–æ—Ä–æ–¥: {content}",
        "—Ä–∞–±–æ—Ç–∞—é": "—Ä–∞–±–æ—Ç–∞: {content}",
        "—É–≤–ª–µ–∫–∞—é—Å—å": "—É–≤–ª–µ—á–µ–Ω–∏—è: {content}",
        "–ª—é–±–ª—é": "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {content}",
        "–∞–ª–ª–µ—Ä–≥–∏—è": "–∞–ª–ª–µ—Ä–≥–∏—è: {content}",
        "–º–µ—á—Ç–∞": "–º–µ—á—Ç–∞: {content}"
	}
	text_lower = text.lower()
	for trigger, pattern in triggers.items():
		if trigger in text_lower:
			start_idx = text_lower.find(trigger) + len(trigger)
			content = text[start_idx:].strip()
			return pattern.format(content = content)
	return text[:150]

def compress_text_to_facts(text: str, existing_facts: list = []) -> list:
	"""–°–∂–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é GPT"""
	try:
		responce = client.chat.completions.create(
			model = "gpt-3.5-turbo",
			message = [
				{"role": "system",
				"content": f"""–°–æ–∂–º–∏ —Ç–µ–∫—Å—Ç –≤ 5-10 –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤. –£—á–∏—Ç—ã–≤–∞–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–∫—Ç—ã: {existing_facts}
				–ü—Ä–∞–≤–∏–ª–∞:
                1. –ò–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ/—É—Ç–æ—á–Ω—è—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                2. –§–æ—Ä–º–∞—Ç: "—Ñ–∞–∫—Ç: –¥–µ—Ç–∞–ª–∏"
                3. –£–¥–∞–ª—è–π —Ñ–ª—É–¥ (—ç–º–æ—Ü–∏–∏, –º–µ–∂–¥–æ–º–µ—Ç–∏—è)"""},
				{"role": "user",
				 "content": text}
			],
			temperature= 0.3
		)
		raw_facts = responce.choices[0].message.content.split("\n")
		return [fact.strip() for fact in raw_facts if fact.strip()]
	except Exception:
		return []

def rank_facts(facts: list) -> list:
	"""–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç—ã –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
	priority = {
		"–∏–º—è": 100, "–≤–æ–∑—Ä–∞—Å—Ç": 90, "–≥–æ—Ä–æ–¥": 80,
		"—Ä–∞–±–æ—Ç–∞": 70, "–∏–Ω—Ç–µ—Ä–µ—Å—ã": 60, "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è": 50
	}

	ranked = []
	for fact in facts:
		score = 0
		for key, value in priority.items():
			if key in fact.lower():
				score = value
				break
		ranked.append((fact, score))
	return [fact for _ in sorted(ranked, reverse=True)[:10]]
