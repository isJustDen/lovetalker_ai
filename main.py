#main.py

import asyncio

#from aiogram.types import ChatActions
import asyncio
import random
import sqlite3

from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types


from config import BOT_TOKEN
from core.sheduler import init_scheduler, schedule_message, schedule_reminder
from core.user_db import register_user, get_user, init_db, add_like, add_dislike, save_message, get_dialogs, set_mode, \
	get_mode, get_connection, get_partners, add_partner
from core.ai_engine import generate_reply
from core.utils import humanize_text

# —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token = BOT_TOKEN)
dp = Dispatcher()
#------------------------------------------------------------------------------------------------------------------

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
	"""—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
	register_user(message.from_user.id, message.from_user.first_name)

	await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø Lovetalker AI üí¨. –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ!")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@dp.message(Command("profile"))
async def profile_command(message: types.Message):
	"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è"""
	user = get_user(message.from_user.id)

	if user:
		user_id, name, likes, dislikes = user
		await message.answer(
			f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {name}\n"
			f"üëç –õ–∞–π–∫–æ–≤: {likes}\n"
			f"üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}"
		)
	else:
		await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞–∂–º–∏ /start")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /like
@dp.message(Command("like"))
async def like_command(message: types.Message):
	"""–§—É–∫–Ω—Ü–∏—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∞–π–∫–∞(–∑–∞–ø–∏—Å—å)"""
	add_like(message.from_user.id)
	await message.answer("üëç –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω")

	user = get_user(message.from_user.id)
	await message.answer(f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user[2]} –ª–∞–π–∫–æ–≤ –∏ {user[3]} –¥–∏–∑–ª–∞–π–∫–æ–≤.")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dislike
@dp.message(Command("dislike"))
async def dislike_command(message: types.Message):
	"""–§—É–∫–Ω—Ü–∏—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞(–∑–∞–ø–∏—Å—å)"""
	add_dislike(message.from_user.id)
	await message.answer('üëé –î–∏–∑–ª–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω!')

	user = get_user(message.from_user.id)
	await message.answer(f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user[2]} –ª–∞–π–∫–æ–≤ –∏ {user[3]} –¥–∏–∑–ª–∞–π–∫–æ–≤.")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat
@dp.message(Command("chat"))
async def chat_command(message: types.Message):
	#–∏–º–∏—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
	args = message.text.split(maxsplit=1)
	if len(args) < 2:
		await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /chat <–∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞>")
		return

	partner = args[1].strip()
	save_message(message.from_user.id, partner,'system',f"–ù–∞—á–∞–ª —á–∞—Ç —Å {partner}")
	await message.answer(f"üì© –î–∏–∞–ª–æ–≥  —Å {partner} –Ω–∞—á–∞—Ç! –ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

	# –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è —á–∞—Å–æ–≤
	schedule_reminder(bot, message.chat.id, "–ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∏—à–∫–∏, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?")



# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
@dp.message(Command("history"))
async def history_command(message: types.Message):
	"""–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
	args = message.text.split(maxsplit=1)
	if len(args) < 2:
		partners = get_partners(message.from_user.id)
		if partners:
			await message.answer("‚ùó –£–∫–∞–∂–∏ –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:\n" + "\n".join(partners))
		else:
			await message.answer("‚ùó –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π —Å /chat <–∏–º—è>")
		return

	partner = args[1].strip()

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
	conn = get_connection()
	cur = conn.cursor()
	cur.execute("""
	SELECT 1 FROM dialogs
	WHERE user_id = ? AND partner_name = ?
	LIMIT 1
	""", (message.from_user.id, partner))
	exists = cur.fetchone() is not None
	conn.close()

	if not exists:
		await message.answer(f"–î–∏–∞–ª–æ–≥ —Å {partner} –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π /chat {partner}")
		return


	dialog = get_dialogs(message.from_user.id, partner, limit = 10)

	if dialog:
		text = f"üìù –ò—Å—Ç–æ—Ä–∏—è —Å {partner}:\n"
		for sender, msg, time in dialog:
			text += f"[{time}] {sender}: {msg}\n"
		await message.answer(text)
	else:
		await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è —Å {partner} –ø—É—Å—Ç–∞.")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode
@dp.message(Command("mode"))
async def mode_command(message: types.Message):
	"""–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è"""
	keyboard = types.InlineKeyboardMarkup(
		inline_keyboard=[
			[types.InlineKeyboardButton(text="Assist üìù", callback_data = "mode_assist"),
			 types.InlineKeyboardButton(text = "Semi-auto ‚ö°", callback_data = "mode_semi")],
			[types.InlineKeyboardButton(text="Auto ü§ñ", callback_data = "mode_auto")
			 ]
		]
	)
	await message.answer('–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:', reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("mode_"))
async def process_mode_callback(callback: types.CallbackQuery):
	mode_mapping = {
		"mode_assist": "assist",
        "mode_semi": "semi-auto",
        "mode_auto": "auto"
	}
	mode = mode_mapping[callback.data]
	set_mode(callback.from_user.id, mode)
	await callback.message.answer(f"‚úÖ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {mode}")
	await callback.answer()


@dp.message(Command('partner'))
async def partner_command(message: types.Message):
	args = message.text.split(maxsplit=2)
	if len(args) < 3:
		await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /partner <–∏–º—è> <—Å—Ç–∏–ª—å>")
		return

	name, style = args[1], args[2]
	add_partner(message.from_user.id, name, style)
	await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä {name} —Å–æ —Å—Ç–∏–ª–µ–º: {style}")













# –ª–æ–≤–∏–º –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message()
async def handle_message(message: types.Message):
	"""–ó–∞—Ö–≤–∞—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —á–∞—Ç–∞"""


	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
	conn = get_connection()
	cur = conn.cursor()
	cur.execute("""
	SELECT partner_name FROM dialogs
	WHERE user_id = ?
	ORDER BY timestamp DESC
	LIMIT 1
	""", (message.from_user.id,))
	last_partner = cur.fetchone()
	partner = last_partner[0] if last_partner else "bot"


	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	save_message(message.from_user.id, partner, 'user', message.text)
	# –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	mode = get_mode(message.from_user.id)

	# –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	dialog_history = get_dialogs(message.from_user.id, partner, limit = 10)
	# –±–µ—Ä—ë–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
	history = [
		{"role": "user" if sender == "user" else "assistant", "content": msg}
		for sender, msg, _ in dialog_history
	]

	if mode == "assist":
		# GPT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
		reply1 = generate_reply(history, message.text + " (–≤–∞—Ä–∏–∞–Ω—Ç 1)", user_id=message.from_user.id)
		reply2 = generate_reply(history, message.text + " (–≤–∞—Ä–∏–∞–Ω—Ç 2)", user_id=message.from_user.id)
		reply3 = generate_reply(history, message.text + " (–≤–∞—Ä–∏–∞–Ω—Ç 3)", user_id=message.from_user.id)
		await message.answer(f"‚úçÔ∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n")
		await message.answer(f"1Ô∏è‚É£ {reply1}\n")
		await message.answer(f"2Ô∏è‚É£ {reply2}\n")
		await message.answer(f"3Ô∏è‚É£ {reply3}")

	elif mode == "semi-auto":
		# GPT –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å
		reply = generate_reply(history, message.text, user_id=message.from_user.id)
		save_message(message.from_user.id, partner,"bot", reply)
		await message.answer(f"‚ö° –û—Ç–≤–µ—Ç: {reply}\n\n(–ú–æ–∂–µ—à—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é)")

	elif mode == "auto":
		# –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–ø–∏–ª–æ—Ç
		reply = humanize_text(generate_reply(history, message.text, user_id=message.from_user.id))
		save_message(message.from_user.id, partner,"bot", reply)

		delay = random.randint(120, 300)
		schedule_message(bot, message.chat.id, f"{reply}", delay=delay)

		await bot.send_chat_action(message.chat.id, "typing")	# —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
		await asyncio.sleep(random.uniform(2, 59.0))

		await message.answer(f"ü§ñ {reply}")


#------------------------------------------------------------------------------------------------------------------
# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
	init_db()
	init_scheduler()

	# –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
	conn = sqlite3.connect('data/users.db')
	cur = conn.cursor()
	cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
	print(f"–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {cur.fetchall()}")
	conn.close()


	print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
	asyncio.run(main())